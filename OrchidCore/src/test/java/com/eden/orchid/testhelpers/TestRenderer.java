// Generated by delombok at Sun Mar 24 19:34:08 CDT 2019
package com.eden.orchid.testhelpers;

import com.eden.common.util.EdenUtils;
import com.eden.orchid.api.render.OrchidRenderer;
import com.eden.orchid.api.theme.pages.OrchidPage;
import com.eden.orchid.utilities.OrchidUtils;
import org.apache.commons.io.IOUtils;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.Map;

@Singleton
public class TestRenderer implements OrchidRenderer {
    private final Map<String, TestRenderedPage> renderedPageMap;

    @Inject
    public TestRenderer() {
        renderedPageMap = new HashMap<>();
    }

    public boolean render(OrchidPage page, InputStream content) {
        String outputPath = OrchidUtils.normalizePath(page.getReference().getPath());
        String outputName;
        if (EdenUtils.isEmpty(OrchidUtils.normalizePath(page.getReference().getOutputExtension()))) {
            outputName = OrchidUtils.normalizePath(page.getReference().getFileName());
        } else {
            outputName = OrchidUtils.normalizePath(page.getReference().getFileName()) + "." + OrchidUtils.normalizePath(page.getReference().getOutputExtension());
        }
        TestRenderedPage outputFile = new TestRenderedPage("/" + outputPath + "/" + outputName, content, page);
        renderedPageMap.put(outputFile.path, outputFile);
        return true;
    }


    public static class TestRenderedPage {
        private final String path;
        private final InputStream contentStream;
        private final OrchidPage origin;
        private String contentString = null;

        public String getContent() {
            if (contentString == null) {
                try {
                    contentString = IOUtils.toString(contentStream, Charset.forName("UTF-8"));
                } catch (Exception e) {
                    contentString = "";
                }
            }
            return contentString;
        }

        public TestRenderedPage(final String path, final InputStream contentStream, final OrchidPage origin) {
            this.path = path;
            this.contentStream = contentStream;
            this.origin = origin;
        }

        public String getPath() {
            return this.path;
        }

        public InputStream getContentStream() {
            return this.contentStream;
        }

        public OrchidPage getOrigin() {
            return this.origin;
        }

        public String getContentString() {
            return this.contentString;
        }

        public void setContentString(final String contentString) {
            this.contentString = contentString;
        }

        @Override
        public boolean equals(final java.lang.Object o) {
            if (o == this) return true;
            if (!(o instanceof TestRenderer.TestRenderedPage)) return false;
            final TestRenderer.TestRenderedPage other = (TestRenderer.TestRenderedPage) o;
            if (!other.canEqual((java.lang.Object) this)) return false;
            final java.lang.Object this$path = this.getPath();
            final java.lang.Object other$path = other.getPath();
            if (this$path == null ? other$path != null : !this$path.equals(other$path)) return false;
            final java.lang.Object this$contentStream = this.getContentStream();
            final java.lang.Object other$contentStream = other.getContentStream();
            if (this$contentStream == null ? other$contentStream != null : !this$contentStream.equals(other$contentStream)) return false;
            final java.lang.Object this$origin = this.getOrigin();
            final java.lang.Object other$origin = other.getOrigin();
            if (this$origin == null ? other$origin != null : !this$origin.equals(other$origin)) return false;
            final java.lang.Object this$contentString = this.getContentString();
            final java.lang.Object other$contentString = other.getContentString();
            if (this$contentString == null ? other$contentString != null : !this$contentString.equals(other$contentString)) return false;
            return true;
        }

        protected boolean canEqual(final java.lang.Object other) {
            return other instanceof TestRenderer.TestRenderedPage;
        }

        @Override
        public int hashCode() {
            final int PRIME = 59;
            int result = 1;
            final java.lang.Object $path = this.getPath();
            result = result * PRIME + ($path == null ? 43 : $path.hashCode());
            final java.lang.Object $contentStream = this.getContentStream();
            result = result * PRIME + ($contentStream == null ? 43 : $contentStream.hashCode());
            final java.lang.Object $origin = this.getOrigin();
            result = result * PRIME + ($origin == null ? 43 : $origin.hashCode());
            final java.lang.Object $contentString = this.getContentString();
            result = result * PRIME + ($contentString == null ? 43 : $contentString.hashCode());
            return result;
        }

        @Override
        public java.lang.String toString() {
            return "TestRenderer.TestRenderedPage(path=" + this.getPath() + ", contentStream=" + this.getContentStream() + ", origin=" + this.getOrigin() + ", contentString=" + this.getContentString() + ")";
        }
    }

    public Map<String, TestRenderedPage> getRenderedPageMap() {
        return this.renderedPageMap;
    }
}
